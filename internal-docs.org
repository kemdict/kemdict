* Rendering pages at first request instead of at build time
:PROPERTIES:
:ID:       df677ea0-0d20-4f07-bed2-df3d56fe4d45
:date:   2022-10-28T23:56:35+0900
:END:

/Note: this no longer applies as each page took way too long (like 5 seconds or so) to build, and I couldn't figure out how to do 404 pages. Unless we *actually* can't generate all files, I will not be using this approach./

I'd like to not render millions of files, I guess. Right now I'm at like 170000.

I want pages to be rendered at first request, then cached on a CDN. This can be achieved with a serverless function, which is vender-agnostic; the caching part is provided by Netlify as a Netlify specific feature (it calls this “On-demand builders”).

To render pages at first request:

1. Import =EleventyServerlessBundlerPlugin= from =@11ty/eleventy=
2. Set up =EleventyServerlessBundlerPlugin=:
   #+begin_src js
   // cfg is the Eleventy config object, ie. the thing that the
   // configuration function receives.
   cfg.addPlugin(EleventyServerlessBundlerPlugin, {
     name: "serverless",
     functionsDir: "./netlify/functions/",
     redirects: "netlify-toml-builders",
   });
   #+end_src
   - =redirects=: how Eleventy will tell Netlify to rewrite routes to trigger a function. There are only a few valid values. =netlify-toml-builders= specifically is for Netlify's on-demand builders.
   - =functionsDir=: where the functions are in the source project
   - =name=: the name of the serverless function
3. Create the function file
   In Netlify's case, functions live in =./netlify/functions/=, and the file name is the function's name. A function can be =<name>.js=, =<name>/<name>.js=, or =<name>/index.js=, but Eleventy seems to require the latter two as it needs to put extra files into the folder.
   As we used “serverless” as the name above, we create a file at =serverless/index.js=.
4. Fill in the function. Just look at =netlify/functions/serverless/index.js= yourself, I won't repeat it here.
5. Then adapt the template(s) to call a function instead.
   - Set permalink to an object mapping function names to URLs instead. If there is a variable in there, you'll have to convert it to a template in the URL. As in:
     #+begin_src yaml
     # Instead of:
     permalink: "/word/{{ word.title | lower }}/index.html"

     # Use:
     permalink:
       "serverless": "/word/:slug"
     # The {{word.title}} lookup part is done with pagination.serverless
     #+end_src
   - Set ~pagination.serverless~ to the key that will be used to retrieve the data. Since the key used is =slug= above, this will be ="eleventy.serverless.path.slug"= — this string is used to lookup the key from Eleventy Serverless's result after reading the permalink object.
   - Note that this does not seem to support data that is an array of objects. Instead, you'll have to make it an object of objects, with the key being what the slug would be.
6. That should… be it?
** Half-complete development mode
*** what
For now, I do not want to use Netlify functions to reduce the amount of data rendered during development. I instead use simplified versions of the dictionaries and then turn off the serverless plugin.

I have set it up so that when the environment variable =DEV= is set:

- the Eleventy Serverless Bundler Plugin is not imported or loaded
- if the simplified source files are present, they are used during data processing instead to avoid a full build

and I have also made it so that Make will set it during the =dev= target.

But there is no way to also apply this to the front matter of =word-pages.njk=.

*** switching between the two
Edit the front matter, and, like, remember to /not/ commit it.

Development mode front matter looks like this:

#+begin_src yaml
layout: base.njk
pagination:
  data: combined
  size: 1
  alias: word
  resolve: values
permalink: "word/{{ word.title }}/index.html"
#+end_src

- Use =resolve: values= to tell Eleventy that the thing we want available in the template is the value
- The data was an array of objects before I started using Eleventy Serverless, but it's necessary to use an object so that Eleventy Serverless can look up the object for a specific word.

Production front matter looks like this:

#+begin_src yaml
layout: base.njk
pagination:
  data: combined
  size: 1
  alias: word
  serverless: eleventy.serverless.path.slug
permalink:
  "serverless": "/word/:slug"
#+end_src

- The leading slash in the permalink value is important. While I don't know whether normally it needs to be left out or not, I do know that it is necessary for (my use of) Eleventy Serverless.
