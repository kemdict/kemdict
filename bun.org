* Using Bun

This project uses Bun as an opportunity for me to try it out.

Specifically:

- Bun is used as the package manager
- During development, the dev server is =bunx --bun astro dev=
  - Use Bun to find the =astro= executable, and also forcibly use Bun instead of Node to run it
- During build, the build is =npx astro build=
  - Use =npx= because why not (or readability, or laziness)
  - The build runs on Node because there are errors if I run it with Bun
    - Specifically ~AggregateError: Error resolving Worker entry point~ from Terser from Vite
- At run time, the command is =bun server/entry.mjs=
  - Bun is also used to install production packages
  - This built artifact can also be run with Node, if production packages are instead installed with another package manager. Bun as a package manager does not put =better-sqlite3= into the right place, which makes it error out.

I don't make =web= a workspace of the root project because I want to reuse its lockfile for run time. What does this mean?

- =bun install --production= appears to imply =--frozen-lockfile=
- If a lockfile is not provided:
  - the installation is much slower
  - I can't even use =--production= to exclude =devDependencies= because of the above
- If a lockfile is provided:
  - If we're using workspaces, the lockfile would be for the workspace, so =bun install= would have to update it. Again, because of the above, this prevents me from not installing =devDependencies=
  - So we can't use workspaces as long as =--production= implies =--frozen-lockfile= with no way to opt out (=--no-frozen-lockfile= is not a thing, or it doesn't apply together with =--production=)
