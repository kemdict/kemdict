---
export interface Props {
  initialInput?: string;
  initialMatchSelection?: string;
}
const { initialInput = "", initialMatchSelection = "prefix" } = Astro.props;

const matchTypes = [
  { mtch: "prefix", name: "開頭為" },
  { mtch: "suffix", name: "結尾為" },
  { mtch: "contains", name: "包含" },
  { mtch: "exact", name: "完全符合" },
];
---

<div class="relative mt-2 mb-2">
  <form action="/search" class="flex h-8" id="sf">
    <select class="btnColor rounded-l" name="m" id="sfd">
      {
        matchTypes.map(({ mtch, name }) => (
          <option selected={initialMatchSelection === mtch} value={mtch}>
            {name}
          </option>
        ))
      }
    </select>
    <input
      class="fade peer w-full border-b-2 border-gray-200 bg-white hover:border-gray-300 dark:border-stone-800 dark:bg-stone-900 dark:hover:border-stone-700"
      type="search"
      autocomplete="off"
      placeholder="輸入欲搜尋的詞彙"
      name="q"
      id="sbi"
      value={initialInput}
    />
    <div
      class="absolute top-8 z-[5] my-2 hidden w-full bg-white p-2 px-3 shadow dark:bg-[#363330]"
      id="suggest"
    >
      <ul class="not-prose mt-1 flex list-none flex-wrap px-2"></ul>
    </div>
    <!-- /search?q=<...>, like search engines -->
    <input class="btnColor rounded-r" type="submit" value="搜尋" />
    <div
      class="absolute right-14 top-[calc(50%-0.9rem)] text-right peer-hover:hidden peer-focus:hidden max-sm:hidden"
    >
      <kbd>Ctrl</kbd>
      <kbd>K</kbd>
    </div>
  </form>
</div>

<script>
  import { lGet, lUpdate, lSet } from "$src/localStorage";
  import { uniqWith, isEqual } from "lodash-es";
  const sbi = document.getElementById("sbi") as HTMLInputElement;
  const sf = document.getElementById("sf") as HTMLFormElement;
  const sfd = document.getElementById("sfd") as HTMLSelectElement;
  const sg = document.getElementById("suggest") as HTMLDivElement;
  sf.addEventListener("submit", (_e) => {
    if (!lGet("search-history")) {
      lSet("search-history", []);
    }
    lUpdate("search-history", (old) => {
      const n = uniqWith(
        [{ q: sbi.value, m: sfd.selectedOptions[0].textContent }, ...old],
        isEqual
      );
      return n.slice(0, 5);
    });
  });
  sf.addEventListener("click", (e) => {
    e.stopPropagation();
  });
  window.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      sg.classList.add("hidden");
    }
  });
  window.addEventListener("click", (_e) => {
    sg.classList.add("hidden");
  });
  sbi.addEventListener("focus", (_e) => {
    const ul = sg.getElementsByTagName("ul")[0] as HTMLUListElement;
    const h3 = document.createElement("h3") as HTMLHeadingElement;
    h3.textContent = "搜尋紀錄";
    h3.classList.add("text-gray-500", "dark:text-gray-300", "font-bold");
    const entries = lGet("search-history", []) as Array<{
      q: string;
      m: string;
    }>;
    // Invalid content -> clear it
    if (!entries[0]?.q) {
      lSet("search-history", []);
      return;
    }
    if (entries.length === 0) return;
    ul.replaceChildren(
      ...entries.map(({ q, m }) => {
        const li = document.createElement("li");
        const a = document.createElement("a");
        const mtch = document.createElement("span") as HTMLSpanElement;
        mtch.classList.add("text-gray-500", "dark:text-gray-400");
        mtch.textContent = `${m}：`;
        a.append(mtch);
        a.append(q);
        a.href = `/search?q=${q}`;
        a.classList.add("wordlink");
        li.classList.add("my-2", "mr-2");
        li.appendChild(a);
        return li;
      })
    );
    sg.replaceChildren(h3, ul);
    sg.classList.remove("hidden");
  });
  window.addEventListener("keydown", (e) => {
    // Following the same approach as
    // kit.svelte.dev/src/lib/search/SearchBox.svelte, with some hints
    // from MDN's page about navigator.platform
    let modifier = "ctrlKey";
    if (
      navigator.platform.indexOf("Mac") === 0 ||
      navigator.platform === "iPhone"
    ) {
      modifier = "metaKey";
    }
    if (e.key === "k" && e[modifier]) {
      sbi.focus();
      e.preventDefault();
    }
  });
</script>
