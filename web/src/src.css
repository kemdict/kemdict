@import "fonts.css";

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  kbd {
    @apply inline-flex items-center justify-center px-1;
    @apply border border-b-2;
    @apply border-gray-400 bg-gray-200 dark:text-gray-700;
    @apply rounded;
    @apply min-h-[2em] min-w-[2em];
  }
  html {
    line-height: 1.6;
  }
  rt {
    font-size: 70%;
  }
  blockquote {
    @apply rounded px-3 py-1;
    @apply bg-gray-100 dark:bg-stone-700;
    & + blockquote {
      @apply mt-2;
    }
  }
  hr {
    @apply border-gray-400;
    @apply mx-auto my-8 w-[95%];
  }
  body {
    @apply relative mt-12;
    @apply bg-white dark:bg-stone-900;
    @apply dark:text-white;
    @apply fade;
    &:focus-visible {
      outline: none;
    }
  }
  .base {
    width: 95%;
    @apply mx-auto my-12 max-w-4xl;
  }
  ol {
    @apply pl-4;
  }
}

@layer components {
  .svelte-tabs {
    ul.svelte-tabs__tab-list {
      @apply border-b-gray-300 dark:border-b-stone-700;
      @apply flex;
    }
    li.svelte-tabs__tab {
      @apply text-gray-800 dark:text-white;
      @apply px-6 max-sm:flex-grow max-sm:text-center;
      &.svelte-tabs__selected {
        @apply border-b-2;
        @apply border-indigo-500 text-indigo-500 dark:border-indigo-300 dark:text-indigo-300;
      }
    }
  }
  /* Put it here for more readable comments. */
  div.split-layout {
    @apply relative;
    /* HACK this works around the left slot clipping into content that
       comes after the split layout.

       Honestly we should just use a grid.
    */
    @apply sm:min-h-[32rem];
    & > div {
      /* The gap between the left edge of the container and the right slot */
      @apply sm:ml-[15rem] md:ml-[18rem];
      & > div.left {
        /* The right slot position minus the gap (3rem) we want between left
           and right */
        @apply sm:w-[12rem] md:w-[15rem];
        /* Actually place it on the left */
        @apply sm:absolute sm:left-4 sm:top-4;
        /* Style for when it's collapsed */
        .fixed {
          @apply sm:w-[12rem] md:w-[15rem];
        }
      }
    }
  }
  .text-input {
    @apply h-12;
    @apply px-4;
    @apply text-sm;
    @apply border border-gray-400 dark:border-stone-500;
    @apply bg-white/20;
    @apply rounded;
    &:focus {
      @apply outline outline-2 outline-offset-2;
      @apply outline-gray-300 dark:outline-gray-500;
    }
  }
  .wordlink {
    @apply btn px-2 py-1 font-bold;
    &:hover {
      @apply no-underline;
    }
  }
  .lang {
    @apply mt-4;
    h1 + & {
      @apply mt-0;
    }
    @apply font-serif text-2xl;
    @apply border-b;
    @apply border-black dark:border-stone-500;
  }
  .dict {
    @apply mt-4;
    h1 + & {
      @apply mt-2;
    }
    @apply text-lg font-bold;
  }
  .toc,
  .def {
    a {
      @apply link;
    }
  }
  .prose {
    /* This is the sort of style generated by @tailwindcss/typography.
       This selector will not override utilities. */
    :where(p):not(:where([class~="not-prose"] *)) {
      @apply my-2;
    }
    :where(h2):not(:where([class~="not-prose"] *)),
    :where(h3):not(:where([class~="not-prose"] *)) {
      @apply font-bold;
    }
    :where(h1):not(:where([class~="not-prose"] *)) {
      @apply mb-4 mt-8 text-3xl;
    }
    :where(h2):not(:where([class~="not-prose"] *)) {
      @apply mb-4 mt-8 text-xl;
    }
    :where(h3):not(:where([class~="not-prose"] *)) {
      @apply mt-6;
    }
    :where(a):not(:where([class~="not-prose"] *)) {
      @apply link;
    }
    ul.two {
      column-count: 2;
      p {
        @apply my-0 py-1;
      }
    }
    :where(ul):not(:where([class~="not-prose"] *)) {
      list-style-type: "– ";
      @apply pl-4;
    }
    :where(ol):not(:where([class~="not-prose"] *)) {
      @apply list-decimal;
    }
    :where(dl):not(:where([class~="not-prose"] *)) {
      dt {
        @apply font-bold;
        @apply text-gray-600 dark:text-gray-300;
        a {
          @apply text-indigo-500 dark:text-indigo-400;
        }
        &:before {
          content: "– ";
          @apply font-normal;
        }
        &:after {
          content: " ::";
          @apply font-normal;
          @apply text-gray-400 dark:text-gray-500;
        }
      }
      dd {
        @apply mb-2 ml-6;
      }
    }
    :where(table):not(:where([class~="not-prose"] *)) {
      @apply text-left text-lg;
      th {
        @apply text-gray-700 dark:text-gray-300;
      }
      td {
        @apply text-teal-900 dark:text-fuchsia-100;
      }
      th,
      td {
        @apply border-b-2 dark:border-stone-700;
        @apply text-left text-lg;
        @apply p-2;
      }
    }
  }
  .word {
    .copyright {
      @apply mb-2 mt-6 text-right text-sm opacity-75;
    }
    transition-property: max-height;
    transition-duration: 250ms;
    transition-timing-function: ease-in-out;
    overflow: hidden;
    h1,
    h2,
    h3 {
      @apply font-bold;
    }
    a {
      @apply link;
    }
    h1 {
      @apply mt-10 text-2xl first:mt-4;
    }
    h2 {
      @apply mt-4 text-2xl;
    }
    h3 {
      @apply mb-0 mt-2;
    }
    ol {
      padding-left: 1.5rem;
      @apply list-decimal;
      li {
        @apply mt-2;
      }
    }
    li:first-child {
      @apply mt-0;
    }
    /* m for Mark. The "例" "英" "反" sort of marker */
    m {
      @apply inline-block pl-1 font-bold;
    }
    .pos {
      @apply mt-2 block font-bold;
    }
    /* This makes up for the mt-2 in .pos if .pos is not present. */
    :not(.pos) + ol,
    :not(.pos) + .def {
      @apply mt-2;
    }
    p {
      @apply prose;
    }
    .def {
      @apply mb-2 block;
    }
  }
  .btnColor {
    @apply bg-gray-200 hover:bg-gray-300 dark:bg-stone-800 dark:hover:bg-stone-700;
  }
  .btn {
    @apply btnColor rounded-md;
    @apply border;
    @apply border-gray-400 bg-gray-200 dark:border-stone-700;
  }
}

@layer utilities {
  .link {
    @apply text-indigo-600 dark:text-indigo-300;
    @apply no-underline;
    &:hover {
      @apply underline;
    }
  }
  .fade {
    @apply transition duration-100 ease-in-out;
  }
}
