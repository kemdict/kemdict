* Astro-based frontend
** Why Astro

SvelteKit provides client-side navigation, however the cost of this is that all components must be sent to the client.

Astro, on the other hand, allows only sending the components that are actually needed, which reduces the time between page load and finishing hydration substantially, at the cost of losing client side navigation.

In other words, Astro allows components that only run at build time.

Since I wasn't using client side navigation anyways (disabling it via =data-sveltekit-reload=, in order to leverage CDN cache more), this is a worthwhile tradeoff.

** Using Bun

See [[./bun.org]].

** Execution phases

I think of there as being three execution phases:

- Development time
- Build time
- Run time
  - Request time
  - Client side

** Building for deployment

#+begin_src shell
make dist
#+end_src

The output is in =dist=. Going to this folder then running the =./start= script in there (copied from =server/=) will start the server.

There is also a variant that builds the SQLite database at the same time:

#+begin_src shell
make build-with-data
#+end_src

This requires Cask and Emacs.

The data is only required at run time.

** Special folders

=server/= contains files that are copied directly into the deployed server bundle.

=hack/= is a workaround for not having top level await in Svelte; see [[./hack/README.md]].

** Deployment

Copy the folder to a server, perhaps through =tar= and =scp=:

#+begin_src shell
tar -cf dist.tar -a dist
scp dist.tar user@example.com:/home/user
#+end_src

Then, on the server:

#+begin_src shell
ssh user@example.com
tar -x dist.tar
rm dist.tar
test -f kemdict && rm -r kemdict
mv dist kemdict
#+end_src

Now run it:

#+begin_src shell
cd kemdict || exit 1
env PORT=1234 ./start
#+end_src

*** Running as a systemd service

Like this, I guess:

#+begin_src systemd
[Unit]
Description=An interface for some dictionaries

[Service]
Type=simple
Restart=always
RestartSec=3
WorkingDirectory=/home/user/kemdict
Environment="PORT=1234"
ExecStart=start

[Install]
WantedBy=default.target
#+end_src

=start= is [[./server/start]], copied to =dist= by [[./Makefile]].

Put this in =~/.config/systemd/user/<name>.service=, do a user =daemon-reload=, then make sure to mark the user as lingering (so services start at boot and don't stop just because you quit your ssh session; see =enable-linger= in [[https://man.archlinux.org/man/loginctl.1.en.html][loginctl(1)]]):

#+begin_src shell
loginctl enable-linger $USER
#+end_src
