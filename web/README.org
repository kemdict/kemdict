* Astro-based frontend

This cannot be built for Cloudflare due to the use of builtin Node modules.

** Why Astro

SvelteKit provides client-side navigation, however the cost of this is that all components must be sent to the client.

Astro, on the other hand, allows only sending the components that are actually needed, which reduces the time between page load and finishing hydration substantially, at the cost of losing client side navigation.

In other words, Astro allows components that only run at build time.

Since I wasn't using client side navigation anyways (disabling it via =data-sveltekit-reload=, in order to leverage CDN cache more), this is a worthwhile trade.

** Building for Node

#+begin_src shell
make build-with-data
#+end_src

or

#+begin_src shell
make build-no-data
#+end_src

The output is in =dist=.

The =with-data= variant builds the SQLite database as well; this requires Cask and Emacs.

The data is always required at runtime, but this allows the code to be updated without having to spend 10+ minutes rebuilding the data unnecessarily.

** Deploying to a server

Copy the folder to a server, perhaps through =tar= and =scp=:

#+begin_src shell
tar -cf dist.tar -a dist
scp dist.tar user@example.com:/home/user
#+end_src

Then, on the server:

#+begin_src shell
ssh user@example.com
tar -x dist.tar
rm dist.tar
test -f kemdict && rm -r kemdict
mv dist kemdict
#+end_src

Note that =better-sqlite3= currently will fail to install on Node 19 (which the Arch =nodejs= package is on), so you'll have to make sure to use Node 18.

Now run it:

#+begin_src shell
cd kemdict || exit 1
env PORT=1234 npm run prod # I've made this task run npm install as well
#+end_src

*** Running as a systemd service

Like this, I guess:

#+begin_src systemd
[Unit]
Description=An interface for some dictionaries

[Service]
Type=simple
Restart=always
RestartSec=3
WorkingDirectory=/home/user/kemdict
Environment="PORT=1234"
ExecStart=start

[Install]
WantedBy=default.target
#+end_src

=start= is [[./server/start]], copied to =dist= by [[./Makefile]].

Put this in =~/.config/systemd/user/<name>.service=, do a user =daemon-reload=, then make sure to mark the user as lingering (so services start at boot and don't stop just because you quit your ssh session; see =enable-linger= in [[https://man.archlinux.org/man/loginctl.1.en.html][loginctl(1)]]):

#+begin_src shell
loginctl enable-linger $USER
#+end_src
